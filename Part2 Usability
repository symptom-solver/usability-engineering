## 7. Detailed Technical Architecture

This section outlines the technical architecture of the Symptomsolver project, ensuring compliance with IEC 62304 and integrating key elements such as system components, data flow, integration, and security mechanisms.

### System Components and Architecture

**Frontend Web Application:**
- **Framework:** Developed using React.js.
- **Functionality:** Enables symptom input and displays diagnoses and warnings.
- **Design:** Responsive and accessible across devices.

**Backend System:**
- **Framework:** Implemented with Node.js and Express.
- **Functionality:** Processes symptoms to identify potential diseases.
- **Data Storage:** Utilizes MongoDB.

**Infrastructure as Code (IaC):**
- **Tools:** Managed with Terraform on AWS for consistent deployments.

### Data Flow and Integration

**Data Flow:**
- **User Input:** Via the frontend.
- **Data Processing:** Backend processes input through RESTful APIs.
- **Diagnosis:** Results displayed on the frontend.

**Integration:**
- **APIs:** RESTful communication between frontend and backend.
- **CI/CD:** Automated with Jenkins for seamless updates.

### Security Mechanisms

**Data Encryption:**
- **At Rest:** AES-256 encryption.
- **In Transit:** TLS 1.2 or higher.

**Authentication:**
- **MFA:** Multi-Factor Authentication.
- **Access Control:** Role-based access.

**Security Audits:**
- **Regular Audits:** Quarterly security audits and penetration tests.

### Documentation and Compliance

**Traceability Matrix:**
- **Requirement Mapping:** Links requirements to tests for compliance verification.

**Configuration Management:**
- **Version Control:** Git with semantic versioning.
- **Artifact Repository:** JFrog Artifactory for version tracking.

**Safety and Risk Management:**
- **Risk Assessment:** Regular assessments with mitigation strategies.
- **Compliance:** Adheres to IEC 62304 standards.

### Connecting to the Software Lifecycle

The detailed technical architecture is integral to the entire software lifecycle, ensuring each phase is interconnected and compliant with IEC 62304:

- **Planning:** The architecture informs the initial planning phase, ensuring all components and interactions are considered from the start.
- **Requirements Analysis:** Architectural components are derived from detailed requirements, ensuring all functional and non-functional needs are met.
- **Design Phases:** The high-level and detailed designs are based on the architecture, ensuring consistent implementation across the project.
- **Implementation and Verification:** Each component is implemented according to the architectural specifications and verified to ensure compliance and functionality.
- **Integration and Testing:** The architecture guides the integration of components, with continuous testing to verify interactions and performance.
- **System Testing:** Overall system tests ensure that the integrated components function as intended within the architectural framework.
- **Software Release:** The final release is based on the fully integrated and tested architecture, ensuring a robust and reliable product.
- **Maintenance:** The architecture provides a foundation for ongoing maintenance and updates, ensuring any changes are systematically integrated and tested.

By embedding the detailed technical architecture within the software lifecycle, Symptomsolver achieves a cohesive and compliant development process, ensuring high standards of quality and performance throughout the project.
## Usability Test for Symptomsolver

### Objective

To evaluate the usability of Symptomsolver by testing the ease of symptom input and the clarity of diagnosis result interpretation with three participants.

### Participants

1. **Participant A:** 35-year-old female, moderate technical skills, uses mobile devices daily.
2. **Participant B:** 50-year-old male, low technical skills, occasional computer user.
3. **Participant C:** 28-year-old female, high technical skills, frequent user of both mobile devices and computers.

### Test Setup

**Environment:**
- Tests conducted remotely using video conferencing to observe interactions.

**Tools:**
- Functional prototype of Symptomsolver.
- Screen recording software to capture interactions.

### Test Procedure

#### Symptom Input Test

1. **Instructions:**
   - Participants are given a list of five symptoms to input into Symptomsolver.
   - They are asked to perform the task as quickly and accurately as possible.

2. **Observation Criteria:**
   - Time taken to input symptoms.
   - Any difficulties or errors encountered.
   - User feedback on the input process.

#### Result Interpretation Test

1. **Instructions:**
   - Participants are shown a sample diagnosis result generated by Symptomsolver.
   - They are asked to explain their understanding of the result.

2. **Observation Criteria:**
   - Clarity of the diagnosis result.
   - Any confusion or misinterpretation.
   - User feedback on the clarity and usefulness of the result.

### Results

#### Participant A

**Symptom Input Test:**
- Time Taken: 2 minutes.
- Difficulties: None.
- Errors: None.
- Feedback: "The process was straightforward and easy to follow."

**Result Interpretation Test:**
- Understanding: Correctly identified the most probable disease and understood the warning message.
- Confusion: None.
- Feedback: "The result was clear and informative."

#### Participant B

**Symptom Input Test:**
- Time Taken: 3.5 minutes.
- Difficulties: Slight difficulty finding the input fields.
- Errors: One typo corrected.
- Feedback: "It was a bit challenging at first, but I got used to it quickly."

**Result Interpretation Test:**
- Understanding: Correctly identified the most probable disease but was slightly confused by the technical terms.
- Confusion: Mild confusion over medical terminology.
- Feedback: "The result was mostly clear, but simpler language would help."

#### Participant C

**Symptom Input Test:**
- Time Taken: 1.5 minutes.
- Difficulties: None.
- Errors: None.
- Feedback: "Very intuitive and quick to use."

**Result Interpretation Test:**
- Understanding: Correctly identified the most probable disease and all warnings.
- Confusion: None.
- Feedback: "The result was very clear and easy to understand."

### Analysis

- **Symptom Input Test:**
  - All participants successfully input symptoms with minimal difficulties.
  - Average time taken was 2.33 minutes.
  - Feedback indicates the input process is generally intuitive.

- **Result Interpretation Test:**
  - All participants correctly identified the most probable disease.
  - Minor confusion noted with medical terminology for Participant B.
  - Average clarity rating was high, with a suggestion for simpler language.

### Recommendations

- **Improve Clarity of Medical Terms:**
  - Provide definitions or simpler explanations for medical terms in the diagnosis results.
  
- **Enhance Input Field Visibility:**
  - Make input fields more prominent to aid users with lower technical skills.

### Conclusion

The usability test with three participants indicates that Symptomsolver is generally intuitive and effective, with minor improvements needed for medical term clarity and input field visibility. These findings will guide further refinements to enhance overall user experience.
